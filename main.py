#!/usr/bin/env python3
#pylint:disable=C0111,C0301,C0330

import itertools
import json
import os
import re
import sys

try:
    from toposort import toposort_flatten
except ImportError as err:
    print("Couldn't find a required module. Please run `pip3 install {}`".format(err.name))
    sys.exit(1)

def read_file(filename):
    with open(filename, "r") as handle:
        return handle.read()

def list_all_files(dirs, suffixes):
    return [f.replace("\\", "/") for f in itertools.chain.from_iterable([
        [os.path.join(dir, f) for f in os.listdir(dir)]
        for dir in dirs
    ]) if any(f.endswith(s) for s in suffixes)]

def get_name(filename):
    return ".".join(filename.split("/")[-1].split(".")[:-1])

class MakefileGenerator:
    def __init__(self, config_file):
        self.config = {}
        self.dependencies = []
        self.nodes = []
        self.tree = []
        self.config_file = config_file

    def load_config(self):
        self.config = json.loads(read_file(self.config_file))
        required_fields = ["dirs", "libs", "out", "flags"]
        for field in required_fields:
            if field not in self.config:
                raise Exception('Missing field "{}" in config'.format(field))

    def find_files(self):
        source_files = list_all_files(self.config["dirs"]["sources"], [".c", ".cpp"])
        header_files = list_all_files(self.config["dirs"]["headers"], [".h", ".hpp"])
        visited_headers = []
        nodes = []
        for source_file in source_files:
            name = get_name(source_file)
            node = {"name": name, "source": source_file}
            for header_file in header_files:
                if name == get_name(header_file):
                    node["header"] = header_file
                    visited_headers.append(header_file)
                    break
            nodes.append(node)
        self.nodes = nodes

    def build_tree(self):
        print(self.nodes)
        dependencies = {}
        for node in self.nodes:
            source = read_file(node["source"])
            regex = re.compile("\\#include [\"<]([A-z0-9\\.]+)[\">]\n")
            matches = regex.findall(source)
            raw_dependencies = [[n for n in self.nodes if m.startswith(n["name"])] for m in matches]
            dependencies[node["name"]] = {n["name"] for n in list(itertools.chain.from_iterable(raw_dependencies))}
        self.dependencies = dependencies
        self.tree = toposort_flatten(dependencies)
        print(self.tree)

    def write_file(self):
        handle = open("./Makefile", "w")
        handle.write(str(self))
        handle.close()

    def generate_body(self):
        body = []
        for name in self.tree:
            object_file = "obj/{}.o".format(name)
            node = [node for node in self.nodes if node["name"] == name][0]
            dependencies = " ".join(["obj/{}.o".format(dep) for dep in self.dependencies[name]]) + " " + node["source"]
            body.append("{object_file}: {dependencies}\n\t$(COMPILER) $(COMPILER_FLAGS) $(COMPILER_HEADERS) -c {source} -o {object_file} $(COMPILER_LIBRARIES)".format(
                object_file=object_file, dependencies=dependencies, source=node["source"]
            ))
        return "\n".join(body)

    def __str__(self):
        flags = " ".join(self.config["flags"])
        libs = " ".join(["-l{}".format(lib) for lib in self.config["libs"]])
        headers = " ".join(["-I{}".format(header_dir) for header_dir in self.config["dirs"]["headers"]])
        object_files = " ".join(["obj/{}.o".format(name) for name in self.tree if any(node["name"] == name for node in self.nodes)])
        return """# Automatically generated by makegen (https://github.com/aldahick/makegen)
COMPILER = g++
COMPILER_FLAGS = {flags}
COMPILER_HEADERS = {headers}
COMPILER_LIBRARIES = {libs}
OBJECT_FILES = {object_files}
OUTPUT_FILE = {output}
all: mkdirs $(OBJECT_FILES)
    $(COMPILER) $(COMPILER_FLAGS) $(COMPILER_HEADERS) $(OBJECT_FILES) -o $(OUTPUT_FILE) $(COMPILER_LIBRARIES)
{body}
clean:
    rm -rf $(OUTPUT_FILE)
    rm -rf $(OBJECT_FILES)
mkdirs:
    mkdir -p obj
    mkdir -p {output_dir}
""".format(
    flags=flags,
    libs=libs,
    headers=headers,
    object_files=object_files,
    output=self.config["out"],
    body=self.generate_body(),
    output_dir=os.path.dirname(self.config["out"])
).replace("    ", "\t")

def main():
    generator = MakefileGenerator("./makegen.json")
    generator.load_config()
    generator.find_files()
    generator.build_tree()
    generator.write_file()
    print("Successfully wrote makefile.")

if __name__ == "__main__":
    main()
